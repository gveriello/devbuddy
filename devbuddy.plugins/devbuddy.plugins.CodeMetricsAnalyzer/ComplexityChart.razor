@using devbuddy.plugins.CodeMetricsAnalyzer.Models

<div class="row">
    <div class="col-md-8">
        <div id="metricsChart" class="chart-container">
            <div id="metricsChartPlaceholder" class="w-100" style="height: 350px; position: relative;">
                <!-- Chart will be rendered here -->
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="card h-100">
            <div class="card-header">
                <h5 class="mb-0">Trends</h5>
            </div>
            <div class="card-body">
                @if (HistoryData.Count > 1)
                {
                    <h6 class="border-bottom pb-2 mb-3">Complexity</h6>
                    <div class="d-flex align-items-center mb-3">
                        <div class="flex-grow-1">
                            <div class="d-flex justify-content-between">
                                <span>First measurement</span>
                                <span>@HistoryData.First().ComplexityScore.ToString("N1")</span>
                            </div>
                            <div class="d-flex justify-content-between">
                                <span>Latest measurement</span>
                                <span>@HistoryData.Last().ComplexityScore.ToString("N1")</span>
                            </div>
                        </div>
                        <div class="ms-3 fs-4 @GetComplexityTrendClass()">
                            @if (ComplexityTrend > 0.1)
                            {
                                <i class="fas fa-arrow-up text-danger"></i>
                            }
                            else if (ComplexityTrend < -0.1)
                            {
                                <i class="fas fa-arrow-down text-success"></i>
                            }
                            else
                            {
                                <i class="fas fa-arrows-alt-h text-secondary"></i>
                            }
                        </div>
                    </div>

                    <h6 class="border-bottom pb-2 mb-3">Maintainability</h6>
                    <div class="d-flex align-items-center mb-3">
                        <div class="flex-grow-1">
                            <div class="d-flex justify-content-between">
                                <span>First measurement</span>
                                <span>@HistoryData.First().MaintainabilityIndex.ToString("N1")</span>
                            </div>
                            <div class="d-flex justify-content-between">
                                <span>Latest measurement</span>
                                <span>@HistoryData.Last().MaintainabilityIndex.ToString("N1")</span>
                            </div>
                        </div>
                        <div class="ms-3 fs-4 @GetMaintainabilityTrendClass()">
                            @if (MaintainabilityTrend > 0.1)
                            {
                                <i class="fas fa-arrow-up text-success"></i>
                            }
                            else if (MaintainabilityTrend < -0.1)
                            {
                                <i class="fas fa-arrow-down text-danger"></i>
                            }
                            else
                            {
                                <i class="fas fa-arrows-alt-h text-secondary"></i>
                            }
                        </div>
                    </div>

                    <h6 class="border-bottom pb-2 mb-3">Issues</h6>
                    <div class="d-flex align-items-center">
                        <div class="flex-grow-1">
                            <div class="d-flex justify-content-between">
                                <span>First measurement</span>
                                <span>@HistoryData.First().TotalIssues</span>
                            </div>
                            <div class="d-flex justify-content-between">
                                <span>Latest measurement</span>
                                <span>@HistoryData.Last().TotalIssues</span>
                            </div>
                        </div>
                        <div class="ms-3 fs-4 @GetIssuesTrendClass()">
                            @if (IssuesTrend > 0)
                            {
                                <i class="fas fa-arrow-up text-danger"></i>
                            }
                            else if (IssuesTrend < 0)
                            {
                                <i class="fas fa-arrow-down text-success"></i>
                            }
                            else
                            {
                                <i class="fas fa-arrows-alt-h text-secondary"></i>
                            }
                        </div>
                    </div>
                }
                else
                {
                    <div class="alert alert-info">
                        <p class="mb-0">Not enough history data available to display trends. Run more analyses to see trends over time.</p>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public List<MetricsHistoryEntry> HistoryData { get; set; } = new List<MetricsHistoryEntry>();

    private double ComplexityTrend => HistoryData.Count > 1
        ? HistoryData.Last().ComplexityScore - HistoryData.First().ComplexityScore
        : 0;

    private double MaintainabilityTrend => HistoryData.Count > 1
        ? HistoryData.Last().MaintainabilityIndex - HistoryData.First().MaintainabilityIndex
        : 0;

    private double IssuesTrend => HistoryData.Count > 1
        ? HistoryData.Last().TotalIssues - HistoryData.First().TotalIssues
        : 0;

    private string GetComplexityTrendClass()
    {
        if (ComplexityTrend > 0.1) return "text-danger";
        if (ComplexityTrend < -0.1) return "text-success";
        return "text-secondary";
    }

    private string GetMaintainabilityTrendClass()
    {
        if (MaintainabilityTrend > 0.1) return "text-success";
        if (MaintainabilityTrend < -0.1) return "text-danger";
        return "text-secondary";
    }

    private string GetIssuesTrendClass()
    {
        if (IssuesTrend > 0) return "text-danger";
        if (IssuesTrend < 0) return "text-success";
        return "text-secondary";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await RenderChartAsync();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await RenderChartAsync();
    }

    private async Task RenderChartAsync()
    {
        if (HistoryData == null || HistoryData.Count < 2)
            return;

        try
        {
            // Prepare data for the chart
            var dates = HistoryData.Select(h => h.Date.ToString("yyyy-MM-dd")).ToArray();
            var complexity = HistoryData.Select(h => h.ComplexityScore).ToArray();
            var maintainability = HistoryData.Select(h => h.MaintainabilityIndex).ToArray();
            var issues = HistoryData.Select(h => h.TotalIssues).ToArray();

            // Render chart using JS interop and chart.js
            // await JSRuntime.InvokeVoidAsync("renderMetricsChart",
            //     "metricsChartPlaceholder",
            //     dates,
            //     complexity,
            //     maintainability,
            //     issues);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error rendering chart: {ex.Message}");
        }
    }
}