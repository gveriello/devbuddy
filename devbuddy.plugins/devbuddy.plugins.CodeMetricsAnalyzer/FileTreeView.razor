@using devbuddy.plugins.CodeMetricsAnalyzer.Models
@using System.IO

<div class="card mb-4 h-100">
    <div class="card-header">
        <h5 class="mb-0"><i class="fas fa-folder-tree me-2"></i>Project Files</h5>
    </div>
    <div class="card-body p-0">
        <div class="list-group list-group-flush file-tree">
            @if (Project != null && Project.Files.Count > 0)
            {
                @* Group files by directory *@
                @foreach (var directoryGroup in GetFileHierarchy())
                {
                    <div class="directory-group">
                        <button class="list-group-item list-group-item-action d-flex align-items-center directory-header @(IsDirectoryExpanded(directoryGroup.Key) ? "active" : "")"
                                @onclick="() => ToggleDirectory(directoryGroup.Key)">
                            <i class="fas @(IsDirectoryExpanded(directoryGroup.Key) ? "fa-folder-open" : "fa-folder") me-2"></i>
                            <span>@GetFolderDisplayName(directoryGroup.Key)</span>
                            <span class="badge bg-secondary rounded-pill ms-auto">@directoryGroup.Value.Count</span>
                        </button>

                        @if (IsDirectoryExpanded(directoryGroup.Key))
                        {
                            <div class="directory-files">
                                @foreach (var file in directoryGroup.Value.OrderBy(f => f.FileName))
                                {
                                    <button class="list-group-item list-group-item-action d-flex align-items-center @(IsFileSelected(file) ? "active" : "")"
                                            @onclick="() => SelectFile(file)">
                                        <i class="fas fa-file-code ms-4 me-2"></i>
                                        <span>@file.FileName</span>

                                        @if (file.Issues.Count > 0)
                                        {
                                            <span class="badge bg-@GetIssueBadgeColor(file) rounded-pill ms-auto">@file.Issues.Count</span>
                                        }
                                    </button>
                                }
                            </div>
                        }
                    </div>
                }
            }
            else
            {
                <div class="list-group-item text-center text-muted py-5">
                    <i class="fas fa-folder-open fa-3x mb-3"></i>
                    <p>No files analyzed yet</p>
                </div>
            }
        </div>
    </div>

    @if (Project != null && Project.Files.Count > 0)
    {
        <div class="card-footer">
            <div class="input-group">
                <input type="text" class="form-control form-control-sm" placeholder="Filter files..." @bind="FileFilter" @bind:event="oninput">
                <button class="btn btn-outline-secondary btn-sm" type="button" @onclick="ApplyFilter">
                    <i class="fas fa-search"></i>
                </button>
            </div>
            <div class="d-flex justify-content-between align-items-center mt-2">
                <span class="text-muted small">@Project.Files.Count files</span>
                <div>
                    <button class="btn btn-sm btn-outline-secondary" @onclick="ExpandAllDirectories">
                        <i class="fas fa-expand-alt"></i>
                    </button>
                    <button class="btn btn-sm btn-outline-secondary ms-1" @onclick="CollapseAllDirectories">
                        <i class="fas fa-compress-alt"></i>
                    </button>
                </div>
            </div>
        </div>
    }
</div>

<style>
    .file-tree {
        max-height: 500px;
        overflow-y: auto;
    }

    .directory-header {
        background-color: #f8f9fa;
        font-weight: 500;
    }

        .directory-header.active {
            background-color: #e9ecef;
        }

    .directory-files {
        border-left: 2px solid #dee2e6;
        margin-left: 0.75rem;
    }
</style>

@code {
    [Parameter]
    public ProjectMetrics Project { get; set; }

    [Parameter]
    public EventCallback<FileMetrics> OnFileSelected { get; set; }

    private HashSet<string> ExpandedDirectories { get; set; } = new HashSet<string>();
    private FileMetrics SelectedFile { get; set; }
    private string FileFilter { get; set; } = string.Empty;
    private IEnumerable<FileMetrics> FilteredFiles { get; set; }

    protected override void OnParametersSet()
    {
        // Initialize with all directories expanded if the project is small
        if (Project != null && Project.Files.Count > 0 && Project.Files.Count <= 10)
        {
            var directories = Project.Files
                .Select(f => Path.GetDirectoryName(f.FilePath))
                .Distinct();

            foreach (var dir in directories)
            {
                ExpandedDirectories.Add(dir);
            }
        }

        FilteredFiles = Project?.Files ?? Enumerable.Empty<FileMetrics>();
    }

    private Dictionary<string, List<FileMetrics>> GetFileHierarchy()
    {
        if (Project == null || !Project.Files.Any())
            return new Dictionary<string, List<FileMetrics>>();

        var files = string.IsNullOrWhiteSpace(FileFilter)
            ? Project.Files
            : Project.Files.Where(f => f.FileName.Contains(FileFilter, StringComparison.OrdinalIgnoreCase));

        var groupedFiles = files
            .GroupBy(f => Path.GetDirectoryName(f.FilePath))
            .OrderBy(g => g.Key)
            .ToDictionary(g => g.Key, g => g.ToList());

        return groupedFiles;
    }

    private string GetFolderDisplayName(string path)
    {
        if (string.IsNullOrEmpty(path))
            return "Root";

        string directoryName = Path.GetFileName(path);
        return string.IsNullOrEmpty(directoryName) ? path : directoryName;
    }

    private bool IsDirectoryExpanded(string directoryPath)
    {
        return ExpandedDirectories.Contains(directoryPath);
    }

    private void ToggleDirectory(string directoryPath)
    {
        if (ExpandedDirectories.Contains(directoryPath))
            ExpandedDirectories.Remove(directoryPath);
        else
            ExpandedDirectories.Add(directoryPath);
    }

    private bool IsFileSelected(FileMetrics file)
    {
        return SelectedFile == file;
    }

    private async Task SelectFile(FileMetrics file)
    {
        SelectedFile = file;
        await OnFileSelected.InvokeAsync(file);
    }

    private string GetIssueBadgeColor(FileMetrics file)
    {
        if (file.Issues.Any(i => i.Severity == MetricsSeverity.Critical))
            return "danger";
        if (file.Issues.Any(i => i.Severity == MetricsSeverity.High))
            return "warning";
        if (file.Issues.Any(i => i.Severity == MetricsSeverity.Medium))
            return "info";
        return "secondary";
    }

    private void ApplyFilter()
    {
        // No additional implementation needed since filtering is done in GetFileHierarchy
        // This method is triggered by the search button
    }

    private void ExpandAllDirectories()
    {
        var directories = Project.Files
            .Select(f => Path.GetDirectoryName(f.FilePath))
            .Distinct();

        foreach (var dir in directories)
        {
            ExpandedDirectories.Add(dir);
        }
    }

    private void CollapseAllDirectories()
    {
        ExpandedDirectories.Clear();
    }
}