@using devbuddy.plugins.CodeMetricsAnalyzer.Models

<div class="card mb-4">
    <div class="card-header d-flex justify-content-between align-items-center">
        <h4 class="mb-0">
            <i class="fas fa-tachometer-alt me-2"></i>
            Project Metrics Summary
        </h4>
        <span class="text-muted small">Analysis date: @Project?.AnalysisDate.ToString("yyyy-MM-dd HH:mm")</span>
    </div>
    <div class="card-body">
        <div class="row">
            <!-- Lines of Code -->
            <div class="col-md-3 col-sm-6 mb-3">
                <div class="card h-100">
                    <div class="card-body text-center">
                        <div class="display-5 fw-bold">@Project?.TotalCodeLines.ToString("N0")</div>
                        <div class="text-muted">Lines of Code</div>
                        @if (Project?.CommentsRatio > 0)
                        {
                            <div class="mt-2 small">
                                <span class="@GetCommentsRatioClass(Project.CommentsRatio)">
                                    @Project.CommentsRatio.ToString("N1")% comments
                                </span>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <!-- Complexity -->
            <div class="col-md-3 col-sm-6 mb-3">
                <div class="card h-100">
                    <div class="card-body text-center">
                        <div class="display-5 fw-bold @GetComplexityClass(Project?.AverageComplexity ?? 0)">
                            @(Project?.AverageComplexity.ToString("N1") ?? "N/A")
                        </div>
                        <div class="text-muted">Average Complexity</div>
                        <div class="mt-2 small">
                            @GetComplexityLabel(Project?.AverageComplexity ?? 0)
                        </div>
                    </div>
                </div>
            </div>

            <!-- Maintainability -->
            <div class="col-md-3 col-sm-6 mb-3">
                <div class="card h-100">
                    <div class="card-body text-center">
                        <div class="display-5 fw-bold @GetMaintainabilityClass(Project?.MaintainabilityIndex ?? 0)">
                            @(Project?.MaintainabilityIndex.ToString("N1") ?? "N/A")
                        </div>
                        <div class="text-muted">Maintainability Index</div>
                        <div class="mt-2 small">
                            @GetMaintainabilityLabel(Project?.MaintainabilityIndex ?? 0)
                        </div>
                    </div>
                </div>
            </div>

            <!-- Issues -->
            <div class="col-md-3 col-sm-6 mb-3">
                <div class="card h-100">
                    <div class="card-body text-center">
                        <div class="display-5 fw-bold">@Project?.Issues.Count</div>
                        <div class="text-muted">Issues Found</div>
                        <div class="mt-2 small">
                            @if (Project != null)
                            {
                                <span class="badge bg-danger me-1">@Project.CriticalIssues Critical</span>
                                <span class="badge bg-warning me-1">@Project.HighIssues High</span>
                                <span class="badge bg-info">@Project.MediumIssues Medium</span>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Additional Details -->
        @if (Project != null)
        {
            <div class="row mt-3">
                <div class="col-12">
                    <div class="alert alert-@GetOverallQualityClass(Project) d-flex align-items-center">
                        <i class="@GetOverallQualityIcon(Project) me-3 fs-4"></i>
                        <div>
                            <h5>@GetOverallQualityTitle(Project)</h5>
                            <p class="mb-0">@GetOverallQualityDescription(Project)</p>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row mt-3">
                <div class="col-md-6">
                    <div class="card">
                        <div class="card-header bg-light">
                            <h5 class="mb-0">Project Structure</h5>
                        </div>
                        <ul class="list-group list-group-flush">
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                Files Analyzed
                                <span class="badge bg-primary rounded-pill">@Project.Files.Count</span>
                            </li>
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                Classes
                                <span class="badge bg-primary rounded-pill">@Project.Files.Sum(f => f.Classes.Count)</span>
                            </li>
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                Methods
                                <span class="badge bg-primary rounded-pill">
                                    @Project.Files.Sum(f => f.Classes.Sum(c => c.Methods.Count))
                                </span>
                            </li>
                        </ul>
                    </div>
                </div>

                <div class="col-md-6">
                    <div class="card">
                        <div class="card-header bg-light">
                            <h5 class="mb-0">Issue Breakdown</h5>
                        </div>
                        <ul class="list-group list-group-flush">
                            @{
                                var issueCategories = Project.Issues
                                .GroupBy(i => i.Id)
                                .Select(g => new { Category = g.First().Title, Count = g.Count() })
                                .OrderByDescending(x => x.Count)
                                .Take(5);
                            }
                            @foreach (var category in issueCategories)
                            {
                                <li class="list-group-item d-flex justify-content-between align-items-center">
                                    @category.Category
                                    <span class="badge bg-warning rounded-pill">@category.Count</span>
                                </li>
                            }
                        </ul>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public ProjectMetrics Project { get; set; }

    private string GetCommentsRatioClass(double ratio)
    {
        if (ratio < 5) return "text-danger";
        if (ratio < 15) return "text-warning";
        if (ratio > 50) return "text-warning"; // Too many comments can also be a problem
        return "text-success";
    }

    private string GetComplexityClass(double complexity)
    {
        if (complexity >= 25) return "text-danger";
        if (complexity >= 15) return "text-warning";
        return "text-success";
    }

    private string GetComplexityLabel(double complexity)
    {
        if (complexity >= 25) return "Highly Complex";
        if (complexity >= 15) return "Complex";
        if (complexity >= 10) return "Moderately Complex";
        return "Well Structured";
    }

    private string GetMaintainabilityClass(double index)
    {
        if (index < 50) return "text-danger";
        if (index < 70) return "text-warning";
        return "text-success";
    }

    private string GetMaintainabilityLabel(double index)
    {
        if (index < 50) return "Poor Maintainability";
        if (index < 70) return "Moderate Maintainability";
        return "Good Maintainability";
    }

    private string GetOverallQualityClass(ProjectMetrics project)
    {
        if (project.AverageComplexity >= 20 || project.MaintainabilityIndex < 50 || project.CriticalIssues > 0)
            return "danger";
        if (project.AverageComplexity >= 15 || project.MaintainabilityIndex < 70 || project.HighIssues > 5)
            return "warning";
        if (project.MaintainabilityIndex > 80 && project.AverageComplexity < 10 && project.HighIssues == 0)
            return "success";
        return "info";
    }

    private string GetOverallQualityIcon(ProjectMetrics project)
    {
        string qualityClass = GetOverallQualityClass(project);
        return qualityClass switch
        {
            "danger" => "fas fa-exclamation-triangle",
            "warning" => "fas fa-exclamation-circle",
            "success" => "fas fa-check-circle",
            _ => "fas fa-info-circle"
        };
    }

    private string GetOverallQualityTitle(ProjectMetrics project)
    {
        string qualityClass = GetOverallQualityClass(project);
        return qualityClass switch
        {
            "danger" => "Critical Code Quality Issues",
            "warning" => "Concerning Code Quality",
            "success" => "Good Code Quality",
            _ => "Acceptable Code Quality"
        };
    }

    private string GetOverallQualityDescription(ProjectMetrics project)
    {
        string qualityClass = GetOverallQualityClass(project);
        return qualityClass switch
        {
            "danger" => "This codebase has significant issues that should be addressed immediately. High complexity and maintainability issues could lead to bugs and high maintenance costs.",
            "warning" => "There are several concerning issues in this codebase. Consider addressing these issues to improve code quality and prevent future maintenance challenges.",
            "success" => "This codebase demonstrates good software engineering practices. It is well-structured, maintainable, and has few issues.",
            _ => "This codebase has acceptable quality metrics but could be improved in some areas to enhance maintainability and reduce complexity."
        };
    }
}