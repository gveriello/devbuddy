@using devbuddy.plugins.CodeMetricsAnalyzer.Models

<div class="card h-100">
    <div class="card-header bg-light">
        <h5 class="mb-0">
            @if (SelectedFile != null)
            {
                <i class="fas fa-file-code me-2"></i>
                <span>@SelectedFile.FileName</span>
            }
            else
            {
                <i class="fas fa-chart-bar me-2"></i>
                <span>Code Metrics</span>
            }
        </h5>
    </div>
    <div class="card-body">
        @if (SelectedFile == null)
        {
            <div class="text-center py-5">
                <i class="fas fa-hand-point-left fa-3x mb-3 text-muted"></i>
                <p class="text-muted">Select a file from the tree to view detailed metrics</p>
            </div>
        }
        else
        {
            <ul class="nav nav-tabs" id="metricsTab" role="tablist">
                <li class="nav-item" role="presentation">
                    <button class="nav-link active" id="overview-tab" data-bs-toggle="tab" data-bs-target="#overview" type="button" role="tab" aria-controls="overview" aria-selected="true">Overview</button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="issues-tab" data-bs-toggle="tab" data-bs-target="#issues" type="button" role="tab" aria-controls="issues" aria-selected="false">Issues (@SelectedFile.Issues.Count)</button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="classes-tab" data-bs-toggle="tab" data-bs-target="#classes" type="button" role="tab" aria-controls="classes" aria-selected="false">Classes (@SelectedFile.Classes.Count)</button>
                </li>
            </ul>
            <div class="tab-content p-3" id="metricsTabContent">
                <!-- Overview Tab -->
                <div class="tab-pane fade show active" id="overview" role="tabpanel" aria-labelledby="overview-tab">
                    <div class="row">
                        <div class="col-md-6">
                            <h6 class="border-bottom pb-2 mb-3">File Metrics</h6>
                            <div class="table-responsive">
                                <table class="table table-sm">
                                    <tbody>
                                        <tr>
                                            <th scope="row">Path</th>
                                            <td>@SelectedFile.FilePath</td>
                                        </tr>
                                        <tr>
                                            <th scope="row">Language</th>
                                            <td>@SelectedFile.Language</td>
                                        </tr>
                                        <tr>
                                            <th scope="row">Lines of Code</th>
                                            <td>@SelectedFile.CodeLines</td>
                                        </tr>
                                        <tr>
                                            <th scope="row">Comment Lines</th>
                                            <td>@SelectedFile.CommentLines</td>
                                        </tr>
                                        <tr>
                                            <th scope="row">Comments Ratio</th>
                                            <td class="@GetCommentsRatioClass(SelectedFile.CommentsRatio)">@SelectedFile.CommentsRatio.ToString("N1")%</td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <h6 class="border-bottom pb-2 mb-3">Complexity Metrics</h6>
                            <div class="table-responsive">
                                <table class="table table-sm">
                                    <tbody>
                                        <tr>
                                            <th scope="row">Cyclomatic Complexity</th>
                                            <td class="@GetComplexityClass(SelectedFile.CyclomaticComplexity)">@SelectedFile.CyclomaticComplexity.ToString("N1")</td>
                                        </tr>
                                        <tr>
                                            <th scope="row">Maintainability Index</th>
                                            <td class="@GetMaintainabilityClass(SelectedFile.MaintainabilityIndex)">@SelectedFile.MaintainabilityIndex.ToString("N1")</td>
                                        </tr>
                                        <tr>
                                            <th scope="row">Classes</th>
                                            <td>@SelectedFile.Classes.Count</td>
                                        </tr>
                                        <tr>
                                            <th scope="row">Methods</th>
                                            <td>@SelectedFile.Classes.Sum(c => c.Methods.Count)</td>
                                        </tr>
                                        <tr>
                                            <th scope="row">Issues</th>
                                            <td>@SelectedFile.Issues.Count</td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>

                    @if (SelectedFile.Classes.Count > 0)
                    {
                        <h6 class="border-bottom pb-2 mb-3 mt-4">Top Methods by Complexity</h6>
                        <div class="table-responsive">
                            <table class="table table-sm table-hover">
                                <thead>
                                    <tr>
                                        <th>Method</th>
                                        <th>Class</th>
                                        <th>Lines</th>
                                        <th>Complexity</th>
                                        <th>Issues</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var method in GetTopMethodsByComplexity())
                                    {
                                        <tr>
                                            <td>@method.MethodName</td>
                                            <td>@method.ClassName</td>
                                            <td>@method.LineCount</td>
                                            <td class="@GetComplexityClass(method.CyclomaticComplexity)">@method.CyclomaticComplexity.ToString("N1")</td>
                                            <td>@method.Issues.Count</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                </div>

                <!-- Issues Tab -->
                <div class="tab-pane fade" id="issues" role="tabpanel" aria-labelledby="issues-tab">
                    @if (SelectedFile.Issues.Count == 0)
                    {
                        <div class="alert alert-success">
                            <i class="fas fa-check-circle me-2"></i>
                            No issues found in this file.
                        </div>
                    }
                    else
                    {
                        <div class="list-group">
                            @foreach (var issue in SelectedFile.Issues.OrderByDescending(i => i.Severity))
                            {
                                <div class="list-group-item">
                                    <div class="d-flex w-100 justify-content-between">
                                        <h6 class="mb-1">
                                            <span class="badge bg-@GetSeverityBadgeClass(issue.Severity) me-2">@issue.Severity</span>
                                            @issue.Title
                                        </h6>
                                        <small>Line @issue.Line</small>
                                    </div>
                                    <p class="mb-1">@issue.Description</p>
                                    @if (!string.IsNullOrEmpty(issue.Suggestion))
                                    {
                                        <div class="alert alert-light mt-2 mb-0">
                                            <i class="fas fa-lightbulb text-warning me-2"></i>
                                            @issue.Suggestion
                                        </div>
                                    }
                                </div>
                            }
                        </div>
                    }
                </div>

                <!-- Classes Tab -->
                <div class="tab-pane fade" id="classes" role="tabpanel" aria-labelledby="classes-tab">
                    <div class="accordion" id="classesAccordion">
                        @foreach (var classMetric in SelectedFile.Classes)
                        {
                            <div class="accordion-item">
                                <h2 class="accordion-header" id="heading-@classMetric.ClassName.Replace(".", "-")">
                                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse"
                                            data-bs-target="#collapse-@classMetric.ClassName.Replace(".", "-")"
                                            aria-expanded="false" aria-controls="collapse-@classMetric.ClassName.Replace(".", "-")">
                                        <div class="d-flex w-100 justify-content-between align-items-center">
                                            <span>@classMetric.ClassName</span>
                                            <div>
                                                <span class="badge bg-primary me-1">@classMetric.Methods.Count methods</span>
                                                <span class="badge bg-@GetComplexityBadgeClass(classMetric.MaintainabilityIndex)">MI: @classMetric.MaintainabilityIndex.ToString("N1")</span>
                                            </div>
                                        </div>
                                    </button>
                                </h2>
                                <div id="collapse-@classMetric.ClassName.Replace(".", "-")" class="accordion-collapse collapse"
                                     aria-labelledby="heading-@classMetric.ClassName.Replace(".", "-")" data-bs-parent="#classesAccordion">
                                    <div class="accordion-body">
                                        <div class="row mb-3">
                                            <div class="col-md-6">
                                                <div class="table-responsive">
                                                    <table class="table table-sm">
                                                        <tbody>
                                                            <tr>
                                                                <th scope="row">Lines</th>
                                                                <td>@classMetric.LineCount</td>
                                                            </tr>
                                                            <tr>
                                                                <th scope="row">Maintainability Index</th>
                                                                <td class="@GetMaintainabilityClass(classMetric.MaintainabilityIndex)">
                                                                    @classMetric.MaintainabilityIndex.ToString("N1")
                                                                </td>
                                                            </tr>
                                                            <tr>
                                                                <th scope="row">Coupling Degree</th>
                                                                <td class="@GetCouplingClass(classMetric.CouplingDegree)">
                                                                    @classMetric.CouplingDegree.ToString("N1")
                                                                </td>
                                                            </tr>
                                                            <tr>
                                                                <th scope="row">Cohesion</th>
                                                                <td class="@GetCohesionClass(classMetric.CohesionMetric)">
                                                                    @classMetric.CohesionMetric.ToString("N1")
                                                                </td>
                                                            </tr>
                                                        </tbody>
                                                    </table>
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                @if (classMetric.Issues.Count > 0)
                                                {
                                                    <div class="alert alert-warning">
                                                        <strong>Issues:</strong>
                                                        <ul class="mb-0 mt-1">
                                                            @foreach (var issue in classMetric.Issues)
                                                            {
                                                                <li>@issue.Title</li>
                                                            }
                                                        </ul>
                                                    </div>
                                                }
                                            </div>
                                        </div>

                                        <h6 class="border-bottom pb-2 mb-3">Methods</h6>
                                        <div class="table-responsive">
                                            <table class="table table-sm table-hover">
                                                <thead>
                                                    <tr>
                                                        <th>Method</th>
                                                        <th>Lines</th>
                                                        <th>Parameters</th>
                                                        <th>Complexity</th>
                                                        <th>Cognitive Complexity</th>
                                                        <th>Maintainability</th>
                                                        <th>Issues</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    @foreach (var method in classMetric.Methods.OrderByDescending(m => m.CyclomaticComplexity))
                                                    {
                                                        <tr>
                                                            <td>@method.MethodName</td>
                                                            <td class="@GetMethodLengthClass(method.LineCount)">@method.LineCount</td>
                                                            <td>@method.ParameterCount</td>
                                                            <td class="@GetComplexityClass(method.CyclomaticComplexity)">@method.CyclomaticComplexity.ToString("N1")</td>
                                                            <td class="@GetComplexityClass(method.CognitiveComplexity)">@method.CognitiveComplexity.ToString("N1")</td>
                                                            <td class="@GetMaintainabilityClass(method.MaintainabilityIndex)">@method.MaintainabilityIndex.ToString("N1")</td>
                                                            <td>
                                                                @if (method.Issues.Count > 0)
                                                                {
                                                                    <span class="badge bg-@GetIssueSeverityBadgeClass(method.Issues)">@method.Issues.Count</span>
                                                                }
                                                                else
                                                                {
                                                                    <span>-</span>
                                                                }
                                                            </td>
                                                        </tr>
                                                    }
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public ProjectMetrics Project { get; set; }

    [Parameter]
    public FileMetrics SelectedFile { get; set; }

    [Parameter]
    public ClassMetrics SelectedClass { get; set; }

    [Parameter]
    public MethodMetrics SelectedMethod { get; set; }

    private List<(string MethodName, string ClassName, double CyclomaticComplexity, int LineCount, List<IssueDetail> Issues)>
        GetTopMethodsByComplexity()
    {
        var methods = new List<(string MethodName, string ClassName, double CyclomaticComplexity, int LineCount, List<IssueDetail> Issues)>();

        foreach (var classMetric in SelectedFile.Classes)
        {
            foreach (var methodMetric in classMetric.Methods)
            {
                methods.Add((
                    methodMetric.MethodName,
                    classMetric.ClassName,
                    methodMetric.CyclomaticComplexity,
                    methodMetric.LineCount,
                    methodMetric.Issues
                ));
            }
        }

        return methods.OrderByDescending(m => m.CyclomaticComplexity).Take(5).ToList();
    }

    private string GetCommentsRatioClass(double ratio)
    {
        if (ratio < 5) return "text-danger";
        if (ratio < 15) return "text-warning";
        if (ratio > 50) return "text-warning"; // Too many comments can also be a problem
        return "text-success";
    }

    private string GetComplexityClass(double complexity)
    {
        if (complexity >= 25) return "text-danger";
        if (complexity >= 15) return "text-warning";
        return "text-success";
    }

    private string GetMaintainabilityClass(double index)
    {
        if (index < 50) return "text-danger";
        if (index < 70) return "text-warning";
        return "text-success";
    }

    private string GetCouplingClass(double coupling)
    {
        if (coupling >= 15) return "text-danger";
        if (coupling >= 8) return "text-warning";
        return "text-success";
    }

    private string GetCohesionClass(double cohesion)
    {
        if (cohesion < 0.3) return "text-danger";
        if (cohesion < 0.6) return "text-warning";
        return "text-success";
    }

    private string GetMethodLengthClass(int lines)
    {
        if (lines > 100) return "text-danger";
        if (lines > 50) return "text-warning";
        if (lines > 30) return "text-warning";
        return "text-success";
    }

    private string GetSeverityBadgeClass(MetricsSeverity severity)
    {
        return severity switch
        {
            MetricsSeverity.Critical => "danger",
            MetricsSeverity.High => "warning",
            MetricsSeverity.Medium => "info",
            MetricsSeverity.Low => "secondary",
            _ => "secondary"
        };
    }

    private string GetComplexityBadgeClass(double maintainability)
    {
        if (maintainability < 50) return "danger";
        if (maintainability < 70) return "warning";
        return "success";
    }

    private string GetIssueSeverityBadgeClass(List<IssueDetail> issues)
    {
        if (issues.Any(i => i.Severity == MetricsSeverity.Critical)) return "danger";
        if (issues.Any(i => i.Severity == MetricsSeverity.High)) return "warning";
        if (issues.Any(i => i.Severity == MetricsSeverity.Medium)) return "info";
        return "secondary";
    }
}